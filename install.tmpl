#!/usr/bin/env python
"""
install.py

General installation script for the segtools package. Interacts with
the user to configure the environment to download and install all
dependencies and the segtools package.

This script is designed to be downloaded and run independently, and
will guide the process of downloading and installing all other source
code.

(c) 2009: Orion Buske <orion.buske@gmail.com>

XXX: R is not installed
XXX: Relatively untested
"""

${COMMON_CODE_HEADER}

# List of R package pre-requisites
R_PACKAGES = ["latticeExtra", "reshape"]
# Repository to use for downloading R libraries through CRAN
CRAN_REPO = "http://cran.fhcrc.org"

${COMMON_CODE_BODY}

############################## MAIN #########################
def main(args=sys.argv[1:]):
    # Set up shell details
    try:
        shell_name = os.path.basename(os.environ["SHELL"])
    except KeyError:
        shell_name = None
    shell = ShellManager(shell_name)
                
    try:
        # Set up arch_home
        arch_home = setup_arch_home()
        
        # Set up python home
        python_home, default_python_home = setup_python_home(arch_home)
        # Add python_home to PYTHONPATH
        prompt_add_to_env(shell, "PYTHONPATH", python_home)

        # Set up bin directory
        script_home, default_script_home = setup_script_home(arch_home)
        # Add script_home to PATH
        prompt_add_to_env(shell, "PATH", script_home)

        # Maybe create pydistutils.cfg
        prompt_create_cfg(arch_home, python_home, default_python_home,
                          script_home, default_script_home)
            
        # Add HDF5, if necessary
        hdf5_dir = prompt_install_hdf5(arch_home)
        if hdf5_dir:
            print >>sys.stderr, ("\nPyTables uses the environment variable"
                                 " HDF5DIR to locate HDF5.")
            prompt_set_env(shell, "HDF5_DIR", hdf5_dir)


        # Add Numpy, if necessary
        prompt_install_numpy()

        # Add rpy2, if necessary
        prompt_install_rpy2()

        # Add R libraries
        reload(site)  # Get any packages/eggs in this new directory
        prompt_install_R_libs(pkgs=R_PACKAGES, repo=CRAN_REPO)
        
        # Install segtools (and dependencies)
        prompt_install_segtools()

        # Test package installations
        prompt_test_packages()

        print >>sys.stderr, "\n=========== Installation complete ============="
        
    finally:  # Clean up
        shell.close()
    
########################### GET VERSION ########################        
def get_rpy2_version():
    """Returns rpy2 version as a string or None if not found or installed
    
    Temporarily removes '.' from sys.path during installation to prevent
    finding rpy2 in current directory (but uninstalled)
    """
    dir = os.getcwd()
    index = None
    if dir in sys.path:
        index = sys.path.index(dir)
        del sys.path[index]
        
    try:
        try:
            import rpy2
            return rpy2.__version__
        except (AttributeError, ImportError):
            return None
    finally:
        if index is not None:
            sys.path.insert(index, dir)
            
def get_segtools_version():
    """Returns segtools version as a string or None if not found or installed
    
    Temporarily removes '.' from sys.path during installation to prevent
    finding segtools in current directory (but uninstalled)
    """
    dir = os.getcwd()
    index = None
    if dir in sys.path:
        index = sys.path.index(dir)
        del sys.path[index]
        
    try:
        try:
            import segtools
            return segtools.__version__
        except (AttributeError, ImportError):
            return None
    finally:
        if index is not None:
            sys.path.insert(index, dir)

##################### SPECIFIC PROGRAM INSTALLERS ################
def prompt_install_rpy2():
    return _installer("rpy2", install_rpy2, get_rpy2_version,
                      install_prompt=EASY_INSTALL_PROMPT)

def prompt_install_R_libs(pkgs=R_PACKAGES, repo=CRAN_REPO):
    query = "\nMay I download and install necessary R libraries?"
    permission = prompt_yes_no(query)
    if permission:
        return install_R_libs(pkgs=pkgs, repo=repo)
    else:
        return False

def prompt_install_segtools():
    return _installer("segtools", install_segtools, get_segtools_version,
                      install_prompt=EASY_INSTALL_PROMPT)
         
def install_rpy2(*args, **kwargs):
    return easy_install("rpy2")

def install_R_libs(pkgs=R_PACKAGES, repo=CRAN_REPO, *args, **kwargs):
    # Start by loading in all eggs that have been installed since script start
    try:
        from rpy2.robjects import r, numpy2ri
        # numpy2ri imported for side-effects
        from numpy import array
        
        r["install.packages"](array(pkgs), repo=repo, dep=True)
    except ImportError:
        raise InstallationError("rpy2 required to install R libs!")

def install_segtools(*args, **kwargs):
    return easy_install("segtools")


if __name__ == "__main__":
    sys.exit(main())
