#!/usr/bin/env python
"""
install.py

General installation script for the segtools package. Interacts with
the user to configure the environment to download and install all
dependencies and the segtools package.

This script is designed to be downloaded and run independently, and
will guide the process of downloading and installing all other source
code.

(c) 2009: Orion Buske <orion.buske@gmail.com>

"""

${COMMON_CODE_HEADER}

import pkg_resources
import re

MIN_R_VERSION = "2.8"
MIN_SEGTOOLS_VERSION = "0.1.0"

R_DOWNLOAD_VERSION = "2.9.2"  # Displayed to user. Should match URL below.
R_URL = "http://cran.fhcrc.org/src/base/R-2/R-2.9.2.tar.gz"

# List of R package pre-requisites
R_PACKAGES = ["latticeExtra", "reshape"]
# Repository to use for downloading R libraries through CRAN
CRAN_REPO = "http://cran.fhcrc.org"

# One command per line
R_INSTALL_SCRIPT = """
if [ ! -e $file ]; then wget $url -O $file; fi
if [ ! -d $filebase ]; then tar -xzf $file; fi
cd $filebase
./configure --prefix=$dir --enable-R-shlib
make
make install
rm -f $file
"""

${COMMON_CODE_BODY}

############################## MAIN #########################
def main(args=sys.argv[1:]):
    # Set up shell details
    try:
        shell_name = os.path.basename(os.environ["SHELL"])
    except KeyError:
        shell_name = None
    shell = ShellManager(shell_name)
                
    try:
        arch_home = setup_arch_home()
        
        python_home, default_python_home = setup_python_home(arch_home)
        # Add python_home to PYTHONPATH
        prompt_add_to_env(shell, "PYTHONPATH", python_home)

        script_home, default_script_home = setup_script_home(arch_home)
        # Add script_home to PATH
        prompt_add_to_env(shell, "PATH", script_home)

        prompt_create_cfg(arch_home, python_home, default_python_home,
                          script_home, default_script_home)
            
        hdf5_dir = prompt_install_hdf5(arch_home)
        if hdf5_dir:
            print >>sys.stderr, ("\nPyTables uses the environment variable"
                                 " HDF5_DIR to locate HDF5.")
            prompt_set_env(shell, "HDF5_DIR", hdf5_dir)

        prompt_install_numpy()

        prompt_install_R(arch_home)
        
        prompt_install_rpy2()

        # Done installing eggs
        addsitedir(python_home)  # Get any new packages/eggs in this directory

        prompt_install_R_libs(pkgs=R_PACKAGES, repo=CRAN_REPO)
        
        prompt_install_segtools()

        # DONE: Test package installations?
        prompt_test_packages()

        print >>sys.stderr, "\n=========== Installation complete ============="
        print >>sys.stderr, ("* Source your ~/.*rc file to update your"
                             " environment *")
        
    finally:  # Clean up
        shell.close()
    
########################### GET VERSION ########################
def get_R_version():
    """Returns R version as a string or None if not found or installed."""
    try:
        cmd = Popen(["R", "--version"], stdout=PIPE, stderr=PIPE)
        resp = cmd.stdout.readlines()[0].strip()
        matched = re.search("R version ([.0-9a-zA-Z]*) .*", resp)
        if matched:
            # R Version found! Check compilation configuration
            print >>sys.stderr, ("found!\nSearching for R library"
                                 " configuration..."),
            cmd = Popen(["R", "CMD", "config", "--cppflags"],
                        stdout=PIPE, stderr=PIPE)
            resp = cmd.stdout.readlines()[0].strip()
            if resp == "R was not built as a library":
                return None

            return matched.group(1)
        else:
            return None
    except (OSError, IndexError):
        return None
        
def get_rpy2_version():
    """Returns rpy2 version as a string or None if not found or installed
    
    Temporarily removes '.' from sys.path during installation to prevent
    finding rpy2 in current directory (but uninstalled)
    """
    dir = os.getcwd()
    index = None
    if dir in sys.path:
        index = sys.path.index(dir)
        del sys.path[index]
        
    try:
        try:
            import rpy2
            return rpy2.__version__
        except (AttributeError, ImportError):
            return None
    finally:
        if index is not None:
            sys.path.insert(index, dir)
            
def get_segtools_version():
    """Returns segtools version as a string or None if not found or installed
    
    Temporarily removes '.' from sys.path during installation to prevent
    finding segtools in current directory (but uninstalled).

    Since segtools __version__ is currently a revision number, get the full
    number from pkg_resources
    """
    dir = os.getcwd()
    index = None
    if dir in sys.path:
        index = sys.path.index(dir)
        del sys.path[index]
        
    try:
        try:
            ref = pkg_resources.Requirement.parse("segtools")
            data = pkg_resources.working_set.find(ref)
            return data.version
        except (AttributeError, ImportError):
            return None
    finally:
        if index is not None:
            sys.path.insert(index, dir)

##################### SPECIFIC PROGRAM INSTALLERS ################
def prompt_install_rpy2():
    return _installer("rpy2", install_rpy2, get_rpy2_version,
                      install_prompt=EASY_INSTALL_PROMPT)

def prompt_install_R(arch_home, min_version=MIN_R_VERSION):
    return _installer("R", install_R, get_R_version,
                      version=R_DOWNLOAD_VERSION,
                      min_version=min_version, arch_home=arch_home)

def prompt_install_R_libs(pkgs=R_PACKAGES, repo=CRAN_REPO):
    query = "\nMay I download and install necessary R libraries?"
    permission = prompt_yes_no(query)
    if permission:
        return install_R_libs(pkgs=pkgs, repo=repo)
    else:
        return False

def prompt_install_segtools(min_version=MIN_SEGTOOLS_VERSION):
    return _installer("segtools", install_segtools, get_segtools_version,
                      install_prompt=EASY_INSTALL_PROMPT,
                      min_version=min_version)

def install_R(arch_home, *args, **kwargs):
    #hdf5_dir = prompt_install_path("HDF5", arch_home)
    install_dir = install_script("R", arch_home, R_INSTALL_SCRIPT,
                                 url=R_URL)
    return install_dir

def install_rpy2(*args, **kwargs):
    return easy_install("rpy2")

def install_R_libs(pkgs=R_PACKAGES, repo=CRAN_REPO, *args, **kwargs):
    # Start by loading in all eggs that have been installed since script start
    try:
        from rpy2.robjects import r, numpy2ri
        # numpy2ri imported for side-effects
        from numpy import array
        
        r["install.packages"](array(pkgs), dep=True)
    except ImportError:
        raise InstallationError("rpy2 required to install R libs!")

def install_segtools(min_version=MIN_SEGTOOLS_VERSION, *args, **kwargs):
    return easy_install("segtools", min_version=min_version)


if __name__ == "__main__":
    sys.exit(main())
