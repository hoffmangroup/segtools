#!/usr/bin/env python
"""
install.py

General installation script for the segtools package. Interacts with
the user to configure the environment to download and install all
dependencies and the segtools package.

This script is designed to be downloaded and run independently, and
will guide the process of downloading and installing all other source
code.

(c) 2009: Orion Buske <stasis {at} uw {dot} edu>

"""
PKG_VERSION = "1.0.1"

${COMMON_CODE_HEADER}

import re

MIN_R_VERSION = "2.8"

R_URL = "http://cran.fhcrc.org/src/base/R-2/R-2.9.2.tar.gz"

# List of R package pre-requisites
R_PACKAGES = ["latticeExtra", "reshape"]

# One command per line
R_INSTALL_SCRIPT = """
cd $tmpdir
wget $url -O $file
if [ ! -d $filebase ]; then tar -xzf $file; fi
cd $filebase
./configure --prefix=$dir --enable-R-shlib
make
make install
"""

${COMMON_CODE_BODY}


class RInstaller(ScriptInstaller):
    name = "R"
    min_version = MIN_R_VERSION
    url = R_URL
    install_script = R_INSTALL_SCRIPT

    def __init__(self, env):
        self.env = env
        super(self.__class__, self).__init__()

    def get_version(self):
        """Returns R version as a string or None if not found or installed."""
        try:
            cmd = Popen(["R", "--version"], stdout=PIPE, stderr=PIPE)
            resp = cmd.stdout.readlines()[0].strip()
            matched = re.search("R version ([.0-9a-zA-Z]*) .*", resp)
            if matched:
                # R Version found! Check compilation configuration
                cmd = Popen(["R", "CMD", "config", "--cppflags"],
                            stdout=PIPE, stderr=PIPE)
                resp = cmd.stdout.readlines()[0].strip()
                if resp == "R was not built as a library":
                    print >>sys.stderr, ("""\
You already have R installed as a program, but in order to work with
segtools, it must be installed as a library."""),
                    return None
                else:
                    return matched.group(1)
            else:
                return None
        except (OSError, IndexError):
            return None

    def install(self):
        """Install R to arch_home.

        Set R_PROFILE_USER to /dev/null for the installation,
        else, ~/.Rprofile code might crash, causing installation to fail/

        """
        if "R_PROFILE_USER" in os.environ:
            old = os.environ["R_PROFILE_USER"]
            os.environ["R_PROFILE_USER"] = "/dev/null"
        else:
            old = None

        try:
            self.script_install(dir=self.env.arch_home)
        finally:
            if old is not None:
                os.environ["R_PROFILE_USER"] = old

class RlibsInstaller(Installer):
    name = "R libraries"
    install_prompt = "\nMay I download and install the necessary %s?"

    def __init__(self, packages=R_PACKAGES):
        self.packages = packages
        super(self.__class__, self).__init__()

    def get_version(self):
        """Always try to install (XXX check for installed R libs)"""
        return False

    def install(self):
        """Install R libs using CRAN.

        Temporary unsets DISPLAY to try to not open X-window for ssh-ers.

        """
        if "DISPLAY" in os.environ:
            old = os.environ["DISPLAY"]
            del os.environ["DISPLAY"]
        else:
            old = None
        try:
            try:
                from rpy2.robjects import r, numpy2ri
                # numpy2ri imported for side-effects
                from numpy import array
                #XXX: check for installed R libs
                r["install.packages"](array(self.packages), dep=True)
            except ImportError:
                raise InstallationError("rpy2 required to install R libs!")
        finally:
            if old is not None:
                os.environ["DISPLAY"] = old

class Rpy2Installer(EasyInstaller):
    name = "RPy2"
    get_version = EasyInstaller.get_egg_version
    version_requirement = ">=2.0,<2.1"

class SegtoolsInstaller(EasyInstaller):
    name = "Segtools"
    min_version = PKG_VERSION
    get_version = EasyInstaller.get_egg_version

############################## MAIN #########################
def main(args=sys.argv[1:]):
    env = Environment()
    env.initialize()

    installers = [SetuptoolsInstaller(),
                  Hdf5Installer(env),
                  NumpyInstaller(),
                  RInstaller(env),
                  Rpy2Installer(),
                  RlibsInstaller(),
                  SegtoolsInstaller()]

    for installer in installers:
        installer.run()
        # Next step may need just-installed eggs, so update site list
        env.refresh_packages()

    # DONE: Test package installations?
    TestSuite().run([PytablesTester()])

    env.close()

if __name__ == "__main__":
    sys.exit(main())
